''' Tests for the `utils` submodule '''

__author__ = 'Kevin Tran'
__email__ = 'ktran@andrew.cmu.edu'

# Things we're testing
from ..utils import find_adsorption_sites
from ..utils import encode_atoms_to_hex, decode_hex_to_atoms

# Things we need to do the tests
import numpy as np
import numpy.testing as npt
from .baselines import get_standard_structure
from .regression_tests.pymatgen_regression_test import _get_sites_for_standard_structure
from ase import Atoms
from pymatgen.io.ase import AseAtomsAdaptor

def test_find_adsorption_sites():
    '''
    Check out `.regression_tests.pymatgen_regression_test._get_sites_for_standard_structure`
    to see what pymatgen gives us. Our `gaspy.utils.find_adsorption_sites` simply gives us
    the value of that object when the key is 'all'.
    '''
    standard_sites = _get_sites_for_standard_structure()['all']
    atoms = AseAtomsAdaptor.get_atoms(get_standard_structure())
    sites = find_adsorption_sites(atoms)
    npt.assert_allclose(np.array(sites), np.array(standard_sites), rtol=1e-5, atol=-1e-7)



def test_encode_decode():
    '''
    Test the encode/decode from atoms to hex and back
    '''
    atoms = Atoms('CC')
    npt.assert_equal(atoms,decode_hex_to_atoms(encode_atoms_to_hex(atoms)))

def test_encode_decode_backwards_compatibility():
    '''
    Test compatibitibility with gaspy v1 hex strings
    '''
    hex_str = '2d206f6620556c6d4153452d5472616a6563746f72792020030000000000000001000000000000003000000000000000180c000000000000060000000000000008000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000001f000000000000000700000000000000070000000000000007000000000000000700000000000000070000000000000007000000000000000700000000000000070000000000000007000000000000000700000000000000070000000000000007000000000000000700000000000000070000000000000007000000000000000700000000000000070000000000000007000000000000001ba92d8b481c154085598276c8fad5bf6651049e98b635401ba92d8b481c154085598276c8fad5bf998437d1cbe93640f770eebb82010440ed557eaf629118c01f5cc292d0e33240032217ec7457ec3f859b6e9e58260dc00e99cfff208a314048f4f1a2f544bbbffd72dfcfd753f2bf47ebc666726533407fb6478aef810f40000d61da9bd109c0643aa210559c3240b3e237adea910740aff24b67bc54e7bf3a539c77a6773440765df413c49ae5bf83f76f4804e716c0163636f2b78133402884e340c40bfe3fed557eaf629118c045d56d3c9f5d2f40eacc48fce4d1d03f859b6e9e58260dc0244f881640aa2c402e4b25e53eff1540fd72dfcfd753f2bf5b9d3b1ebea430409b07cbee4e860a40000d61da9bd109c0ce912d38a8ce2e40d033bb114a960240aff24b67bc54e7bfbde11083a5423140828cf340a3c4f4bf83f76f4804e716c09ac4aafdb64c30406026ea098314f43fed557eaf629118c04df256539df3284032aa9cdf1f0bd7bf859b6e9e58260dc02b6c712d3e402640bcf366976e811340fd72dfcfd753f2bfbe5760537adf2a40b7584e53ae8a0540000d61da9bd109c0d4ae164fa6642840d8097dec5235fb3faff24b67bc54e7bf82e00a1d491b2c40de2f74eb293b114083f76f4804e716c05ded3e6a05182b40b83d1817b0f4104052ca21a58dcd14c004539121648d32404c2313465bf909409eb2c493ae9e05c0d8bd3a83b56834408e38f2846b1bfa3f79095dd41d24cabf949ea6f5050f3340162927d55802f13f0f031b432f2313c0c9d063864b2b3340af4f5459e4a9e1bfcbf5a7c5f14902c0b70d71f39bd13140c975d1e5d16c054012745a9e65211dc0066de413fb8434408cccb392bfed0c4052ca21a58dcd14c010c30b5ac6b02e40697496aabafd04409eb2c493ae9e05c05b4caf8eb4333140c8daf84d2a24f03f79095dd41d24cabf2e5a36020ab42f40442db7785e2cdc3f0f031b432f2313c098beb02395ec2f400a89863016371440cbf5a7c5f14902c0987fcb55cf212e40e5c6544a3171004012745a9e65211dc08afb581ffa4f3140a81d37f71ef2074052ca21a58dcd14c017e0f470c446284086c5190f1a0200409eb2c493ae9e05c0beb5473467fd2b4003f4fd5ba4b3d83f79095dd41d24cabf35771f19084a2940b0935cc64c61c7bf0f031b432f2313c09edb993a938229409831c8e245b91140cbf5a7c5f14902c09e9cb46ccdb727400230b05d21ebf63f12745a9e65211dc019149b55f2352cd020000000000007b2263656c6c223a205b5b2d322e30303633323839332c202d372e34393437363237362c20302e333839363634355d2c205b362e32323836343932382c20302e302c20302e34353432393439325d2c205b302e302c20302e302c2033312e36313631363333345d5d2c2022746167732e223a207b226e646172726179223a205b5b33385d2c2022696e743634222c20313237325d7d2c2022706f736974696f6e732e223a207b226e646172726179223a205b5b33382c20335d2c2022666c6f61743634222c203336305d7d2c20226d61676d6f6d732e223a207b226e646172726179223a205b5b33385d2c2022666c6f61743634222c20323438385d7d2c2022636861726765732e223a207b226e646172726179223a205b5b33385d2c2022666c6f61743634222c20323739325d7d2c20226e756d626572732e223a207b226e646172726179223a205b5b33385d2c2022696e743634222c2035365d7d2c20226d6f6d656e74612e223a207b226e646172726179223a205b5b33382c20335d2c2022666c6f61743634222c20313537365d7d2c202276657273696f6e223a20312c2022706263223a205b747275652c20747275652c20747275655d2c20226173655f76657273696f6e223a2022332e31342e31222c2022636f6e73747261696e7473223a20225b7b5c226e616d655c223a205c2246697841746f6d735c222c205c226b77617267735c223a207b5c22696e64696365735c223a205b382c20392c2031302c2031312c2031322c2031332c2031342c2031352c2031362c2031372c2031382c2031392c2032362c2032372c2032382c2032392c2033302c2033312c2033322c2033332c2033342c2033352c2033362c2033375d7d7d5d227d'
    npt.assert_equal(Atoms(''),decode_hex_to_atoms(hex_str))
